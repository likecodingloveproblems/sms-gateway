// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: accounting/accounting.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Accounting_ReserveDebit_FullMethodName = "/accounting.Accounting/ReserveDebit"
	Accounting_CancelDebit_FullMethodName  = "/accounting.Accounting/CancelDebit"
)

// AccountingClient is the client API for Accounting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountingClient interface {
	ReserveDebit(ctx context.Context, in *ReserveDebitRequest, opts ...grpc.CallOption) (*ReserveDebitResponse, error)
	CancelDebit(ctx context.Context, in *CancelDebitRequest, opts ...grpc.CallOption) (*CancelDebitResponse, error)
}

type accountingClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountingClient(cc grpc.ClientConnInterface) AccountingClient {
	return &accountingClient{cc}
}

func (c *accountingClient) ReserveDebit(ctx context.Context, in *ReserveDebitRequest, opts ...grpc.CallOption) (*ReserveDebitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReserveDebitResponse)
	err := c.cc.Invoke(ctx, Accounting_ReserveDebit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountingClient) CancelDebit(ctx context.Context, in *CancelDebitRequest, opts ...grpc.CallOption) (*CancelDebitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelDebitResponse)
	err := c.cc.Invoke(ctx, Accounting_CancelDebit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountingServer is the server API for Accounting service.
// All implementations must embed UnimplementedAccountingServer
// for forward compatibility.
type AccountingServer interface {
	ReserveDebit(context.Context, *ReserveDebitRequest) (*ReserveDebitResponse, error)
	CancelDebit(context.Context, *CancelDebitRequest) (*CancelDebitResponse, error)
	mustEmbedUnimplementedAccountingServer()
}

// UnimplementedAccountingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccountingServer struct{}

func (UnimplementedAccountingServer) ReserveDebit(context.Context, *ReserveDebitRequest) (*ReserveDebitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveDebit not implemented")
}
func (UnimplementedAccountingServer) CancelDebit(context.Context, *CancelDebitRequest) (*CancelDebitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelDebit not implemented")
}
func (UnimplementedAccountingServer) mustEmbedUnimplementedAccountingServer() {}
func (UnimplementedAccountingServer) testEmbeddedByValue()                    {}

// UnsafeAccountingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountingServer will
// result in compilation errors.
type UnsafeAccountingServer interface {
	mustEmbedUnimplementedAccountingServer()
}

func RegisterAccountingServer(s grpc.ServiceRegistrar, srv AccountingServer) {
	// If the following call pancis, it indicates UnimplementedAccountingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Accounting_ServiceDesc, srv)
}

func _Accounting_ReserveDebit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveDebitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServer).ReserveDebit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounting_ReserveDebit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServer).ReserveDebit(ctx, req.(*ReserveDebitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounting_CancelDebit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelDebitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountingServer).CancelDebit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounting_CancelDebit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountingServer).CancelDebit(ctx, req.(*CancelDebitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Accounting_ServiceDesc is the grpc.ServiceDesc for Accounting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Accounting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accounting.Accounting",
	HandlerType: (*AccountingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReserveDebit",
			Handler:    _Accounting_ReserveDebit_Handler,
		},
		{
			MethodName: "CancelDebit",
			Handler:    _Accounting_CancelDebit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accounting/accounting.proto",
}
